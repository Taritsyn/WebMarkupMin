<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlGroup_DoctypeTagsAndAttributes" xml:space="preserve">
    <value>Doctype, tags and attributes</value>
  </data>
  <data name="ControlGroup_EmbeddedAndInlineCss" xml:space="preserve">
    <value>Embedded and inline CSS</value>
  </data>
  <data name="ControlGroup_EmbeddedAndInlineJavaScript" xml:space="preserve">
    <value>Embedded and inline JavaScript</value>
  </data>
  <data name="ControlGroup_EmbeddedJson" xml:space="preserve">
    <value>Embedded JSON</value>
  </data>
  <data name="ControlGroup_JavaScriptTemplating" xml:space="preserve">
    <value>JavaScript templating</value>
  </data>
  <data name="ControlGroup_SpacesCommentsAndCdataSections" xml:space="preserve">
    <value>Spaces, comments and CDATA sections</value>
  </data>
  <data name="DisplayName_AttributeQuotesStyle" xml:space="preserve">
    <value>Style of the HTML attribute quotes</value>
  </data>
  <data name="DisplayName_CssMinifierName" xml:space="preserve">
    <value>CSS minifier</value>
  </data>
  <data name="DisplayName_CustomAngularDirectiveList" xml:space="preserve">
    <value>List of custom Angular 1.X directives with expressions</value>
  </data>
  <data name="DisplayName_JsMinifierName" xml:space="preserve">
    <value>JavaScript minifier</value>
  </data>
  <data name="DisplayName_MinifyAngularBindingExpressions" xml:space="preserve">
    <value>Minify Angular 1.X binding expressions</value>
  </data>
  <data name="DisplayName_MinifyEmbeddedCssCode" xml:space="preserve">
    <value>Minify embedded CSS code</value>
  </data>
  <data name="DisplayName_MinifyEmbeddedJsCode" xml:space="preserve">
    <value>Minify embedded JavaScript code</value>
  </data>
  <data name="DisplayName_MinifyEmbeddedJsonData" xml:space="preserve">
    <value>Minify embedded JSON data</value>
  </data>
  <data name="DisplayName_MinifyInlineCssCode" xml:space="preserve">
    <value>Minify inline CSS code</value>
  </data>
  <data name="DisplayName_MinifyInlineJsCode" xml:space="preserve">
    <value>Minify inline JavaScript code</value>
  </data>
  <data name="DisplayName_MinifyKnockoutBindingExpressions" xml:space="preserve">
    <value>Minify Knockout binding expressions</value>
  </data>
  <data name="DisplayName_PreservableAttributeList" xml:space="preserve">
    <value>List of preservable attribute expressions</value>
  </data>
  <data name="DisplayName_ProcessableScriptTypeList" xml:space="preserve">
    <value>List of processable script types</value>
  </data>
  <data name="DisplayName_RemoveEmptyAttributes" xml:space="preserve">
    <value>Remove empty attributes</value>
  </data>
  <data name="DisplayName_RemoveHtmlComments" xml:space="preserve">
    <value>Remove HTML comments</value>
  </data>
  <data name="DisplayName_RemoveHtmlCommentsFromScriptsAndStyles" xml:space="preserve">
    <value>Remove HTML comments from scripts and styles</value>
  </data>
  <data name="DisplayName_RemoveHttpProtocolFromAttributes" xml:space="preserve">
    <value>Remove HTTP protocol from attributes</value>
  </data>
  <data name="DisplayName_RemoveHttpsProtocolFromAttributes" xml:space="preserve">
    <value>Remove HTTPS protocol from attributes</value>
  </data>
  <data name="DisplayName_RemoveJsProtocolFromAttributes" xml:space="preserve">
    <value>Remove JavaScript protocol from attributes</value>
  </data>
  <data name="DisplayName_RemoveRedundantAttributes" xml:space="preserve">
    <value>Remove redundant attributes</value>
  </data>
  <data name="DisplayName_RemoveTagsWithoutContent" xml:space="preserve">
    <value>Remove tags without content</value>
  </data>
  <data name="DisplayName_UseMetaCharsetTag" xml:space="preserve">
    <value>Use META charset tag</value>
  </data>
  <data name="DisplayName_UseShortDoctype" xml:space="preserve">
    <value>Use short DOCTYPE</value>
  </data>
  <data name="DisplayName_WhitespaceMinificationMode" xml:space="preserve">
    <value>Whitespace minification mode</value>
  </data>
  <data name="ListItem_AttributeQuotesStyle_Auto" xml:space="preserve">
    <value>Auto-detect style for attribute quotes based on the source input</value>
  </data>
  <data name="ListItem_AttributeQuotesStyle_Double" xml:space="preserve">
    <value>Double quotes</value>
  </data>
  <data name="ListItem_AttributeQuotesStyle_Optimal" xml:space="preserve">
    <value>Optimal style for attribute quotes based on the attribute value</value>
  </data>
  <data name="ListItem_AttributeQuotesStyle_Single" xml:space="preserve">
    <value>Single quotes</value>
  </data>
  <data name="ListItem_WhitespaceMinificationMode_Aggressive" xml:space="preserve">
    <value>Aggressive whitespace minification</value>
  </data>
  <data name="ListItem_WhitespaceMinificationMode_Medium" xml:space="preserve">
    <value>Medium whitespace minification</value>
  </data>
  <data name="ListItem_WhitespaceMinificationMode_None" xml:space="preserve">
    <value>Keep whitespace</value>
  </data>
  <data name="ListItem_WhitespaceMinificationMode_Safe" xml:space="preserve">
    <value>Safe whitespace minification</value>
  </data>
</root>