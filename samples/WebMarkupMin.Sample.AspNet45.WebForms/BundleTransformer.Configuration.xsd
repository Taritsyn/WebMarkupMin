<?xml version="1.0" encoding="utf-8"?>
<xs:schema
  id="bundleTransformerConfiguration"
  targetNamespace="http://tempuri.org/BundleTransformer.Configuration.xsd"
  elementFormDefault="qualified"
  xmlns="http://tempuri.org/BundleTransformer.Configuration.xsd"
  xmlns:mstns="http://tempuri.org/BundleTransformer.Configuration.xsd"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="bundleTransformer">
    <xs:annotation>
      <xs:documentation>Bundle Transformer configuration settings</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:all>
        <xs:element name="core" type="CoreSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="less" type="LessSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="sassAndScss" type="SassAndScssSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="coffeeScript" type="CoffeeScriptSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="typeScript" type="TypeScriptSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="hogan" type="HoganSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="handlebars" type="HandlebarsSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="autoprefixer" type="AutoprefixerSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="microsoftAjax" type="MicrosoftAjaxSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="nuglify" type="NUglifySettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="yui" type="YuiSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="closure" type="ClosureSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="uglify" type="UglifySettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="packer" type="PackerSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="csso" type="CssoSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="webGrease" type="WgSettings_SchemaType" minOccurs="0" maxOccurs="1" />
        <xs:element name="clean" type="CleanSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <!-- Simple types -->
  <xs:simpleType name="Boolean_SchemaType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="true" />
      <xs:enumeration value="false" />
    </xs:restriction>
  </xs:simpleType>
  <!-- /Simple types -->

  <!-- Complex types -->
  <xs:complexType name="IncludedPathRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered included paths</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddIncludedPathRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveIncludedPathRegistration_SchemaType" />
      <xs:element name="clear" type="ClearIncludedPathRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddIncludedPathRegistration_SchemaType">
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveIncludedPathRegistration_SchemaType">
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearIncludedPathRegistration_SchemaType" />
  <!-- /Complex types -->

  <!-- Core settings -->
  <xs:complexType name="CoreSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of core</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="StyleSettings_SchemaType" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Configuration settings of processing style assets</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="js" type="ScriptSettings_SchemaType" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Configuration settings of processing script assets</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="assetHandler" type="AssetHandlerSettings_SchemaType" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Configuration settings of the debugging HTTP handler, that responsible for text output of processed asset</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:all>
    <xs:attribute name="enableTracing" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable tracing</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFilesWithMicrosoftStyleExtensions" type="xs:string"
      use="optional" default="MicrosoftAjax.js,MicrosoftMvcAjax.js,MicrosoftMvcValidation.js,knockout-$version$.js">
      <xs:annotation>
        <xs:documentation>List of JS files with Microsoft-style extensions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="StyleSettings_SchemaType">
    <xs:complexContent>
      <xs:extension base="AssetSettings_SchemaType">
        <xs:attribute name="defaultPostProcessors" type="xs:string" use="optional" default="UrlRewritingCssPostProcessor">
          <xs:annotation>
            <xs:documentation>Ordered comma-separated list of names of default postprocessors</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ScriptSettings_SchemaType">
    <xs:complexContent>
      <xs:extension base="AssetSettings_SchemaType">
        <xs:attribute name="defaultPostProcessors" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Ordered comma-separated list of names of default postprocessors</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AssetSettings_SchemaType">
    <xs:all>
      <xs:element name="translators" type="TranslatorRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="postProcessors" type="PostProcessorRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="minifiers" type="MinifierRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="fileExtensions" type="FileExtensionRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="defaultMinifier" type="xs:string" use="optional" default="NullMinifier">
      <xs:annotation>
        <xs:documentation>Name of default minifier</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePreMinifiedFiles" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow usage of pre-minified files</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineFilesBeforeMinification" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow combine files before minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="TranslatorRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered translators</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddTranslatorRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveTranslatorRegistration_SchemaType" />
      <xs:element name="clear" type="ClearTranslatorRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddTranslatorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Adds a translator registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AddAssetProcessorRegistrationBase_SchemaType">
        <xs:attribute name="enabled" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to enable translator</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RemoveTranslatorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes a translator registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RemoveAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClearTranslatorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes all translator registrations, that specified above</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ClearAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PostProcessorRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered postprocessors</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddPostProcessorRegistration_SchemaType" />
      <xs:element name="remove" type="RemovePostProcessorRegistration_SchemaType" />
      <xs:element name="clear" type="ClearPostProcessorRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddPostProcessorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Adds a postprocessor registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AddAssetProcessorRegistrationBase_SchemaType">
        <xs:attribute name="useInDebugMode" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to use postprocessor in the debugging HTTP handlers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RemovePostProcessorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes a postprocessor registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RemoveAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClearPostProcessorRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes all postProcessor registrations, that specified above</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ClearAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MinifierRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered minifiers</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddMinifierRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveMinifierRegistration_SchemaType" />
      <xs:element name="clear" type="ClearMinifierRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddMinifierRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Adds a minifier registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AddAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RemoveMinifierRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes a minifier registration</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RemoveAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClearMinifierRegistration_SchemaType">
    <xs:annotation>
      <xs:documentation>Removes all minifier registrations, that specified above</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ClearAssetProcessorRegistrationBase_SchemaType" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AddAssetProcessorRegistrationBase_SchemaType" abstract="true">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Processor name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Processor .NET type name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveAssetProcessorRegistrationBase_SchemaType" abstract="true">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Processor name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearAssetProcessorRegistrationBase_SchemaType" abstract="true" />

  <xs:complexType name="FileExtensionRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered file extensions</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddFileExtensionRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveFileExtensionRegistration_SchemaType" />
      <xs:element name="clear" type="ClearFileExtensionRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddFileExtensionRegistration_SchemaType">
    <xs:attribute name="fileExtension" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>File extension</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="assetTypeCode" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Asset type code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveFileExtensionRegistration_SchemaType">
    <xs:attribute name="fileExtension" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>File extension</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearFileExtensionRegistration_SchemaType" />

  <xs:complexType name="JsEngineSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of JS engine</xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>JS engine name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AssetHandlerSettings_SchemaType">
    <xs:attribute name="disableServerCache" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable storage text content of processed asset in server cache</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serverCacheDurationInMinutes" use="optional" default="15">
      <xs:annotation>
        <xs:documentation>Duration of storage the text content of processed asset in server cache (in minutes)</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="1" />
          <xs:maxInclusive value="1440" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="disableClientCache" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable storage text content of processed asset in browser cache</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /Core settings -->

  <!-- LESS settings -->
  <xs:complexType name="LessSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of LESS translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="includePaths" type="IncludedPathRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="useNativeMinification" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow the use of native minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ieCompat" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enforce IE compatibility (IE8 data-uri)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="math" use="optional" default="Always">
      <xs:annotation>
        <xs:documentation>Math mode</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Always">
            <xs:annotation>
              <xs:documentation>Eagerly try to solve all operations</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="ParensDivision">
            <xs:annotation>
              <xs:documentation>Require parens for division `/`</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Parens">
            <xs:annotation>
              <xs:documentation>Require parens for all operations</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="StrictLegacy">
            <xs:annotation>
              <xs:documentation>Legacy strict behavior (super-strict)</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="strictUnits" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether units need to evaluate correctly</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dumpLineNumbers" use="optional" default="None">
      <xs:annotation>
        <xs:documentation>Output mode of the debug information</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="None">
            <xs:annotation>
              <xs:documentation>No output the debug information</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Comments">
            <xs:annotation>
              <xs:documentation>Output the debug information within comments</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="MediaQuery">
            <xs:annotation>
              <xs:documentation>Output the debug information within a fake media query which is compatible with the SASS format</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="All">
            <xs:annotation>
              <xs:documentation>Output the debug information within comments and fake media query</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="javascriptEnabled" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable JS in less files</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="globalVariables" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of variable list, that can be referenced by the file (semicolon-separated list of values of the form VAR=VALUE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modifyVariables" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of variable list, that modifies a variables already declared in the file (semicolon-separated list of values of the form VAR=VALUE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>
          Severity level of errors:
          0 - only error messages;
          1 - only error messages and warnings.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="1" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <!-- /LESS settings -->

  <!-- Sass and SCSS settings -->
  <xs:complexType name="SassAndScssSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Sass and SCSS translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="includePaths" type="IncludedPathRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="useNativeMinification" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow the use of native minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentType" use="optional" default="Space">
      <xs:annotation>
        <xs:documentation>Indent type</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Space" />
          <xs:enumeration value="Tab" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentWidth" use="optional" default="2">
      <xs:annotation>
        <xs:documentation>Number of spaces or tabs to be used for indentation</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="2147483647" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lineFeedType" use="optional" default="CrLf">
      <xs:annotation>
        <xs:documentation>Line feed type</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Cr" />
          <xs:enumeration value="CrLf" />
          <xs:enumeration value="Lf" />
          <xs:enumeration value="LfCr" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>
          Severity level of errors:
          0 - only error messages;
          1 - only error messages and warnings except deprecations;
          2 - only error messages and all warnings.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="2" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <!-- /Sass and SCSS settings -->

  <!-- CoffeeScript settings -->
  <xs:complexType name="CoffeeScriptSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of CoffeeScript translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="bare" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow compilation to JS without the top-level function safety wrapper</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /CoffeeScript settings -->

  <!-- TypeScript settings -->
  <xs:complexType name="TypeScriptSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of TypeScript translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="libs" type="LibraryFileRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="allowUnreachableCode" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable error reporting for unreachable code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowUnusedLabels" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable error reporting for unused labels</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alwaysStrict" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to ensure `use strict` is always emitted</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="downlevelIteration" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to emit more compliant, but verbose and less performant JavaScript for iteration</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exactOptionalPropertyTypes" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to interpret optional property types as written, rather than adding `undefined`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceConsistentCasingInFileNames" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to ensure that casing is correct in imports</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreDeprecations" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Version number of TypeScript for which deprecation warnings should be ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="newLine" use="optional" default="CrLf">
      <xs:annotation>
        <xs:documentation>Newline character for emitting files</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="CrLf" />
          <xs:enumeration value="Lf" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="noCheck" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable full type checking (only critical parse and emit errors will be reported)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noEmit" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable emitting files from a compilation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noEmitHelpers" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable generating custom helper functions like `__extends` in compiled output</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noEmitOnError" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable emitting files if any type checking errors are reported</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noErrorTruncation" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable truncating types in error messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noFallthroughCasesInSwitch" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable error reporting for fallthrough cases in switch statements</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noImplicitAny" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable error reporting for expressions and declarations with an implied `any` type</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noImplicitOverride" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to ensure overriding members in derived classes are marked with an override modifier</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noImplicitReturns" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable error reporting for codepaths that do not explicitly return in a function</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noImplicitThis" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable error reporting when `this` is given the type `any`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noLib" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable including any library files, including the default `lib.d.ts`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noPropertyAccessFromIndexSignature" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enforce using indexed accessors for keys declared using an indexed type</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noResolve" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noUncheckedIndexedAccess" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to add `undefined` to a type when accessed using an index</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noUnusedLocals" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable error reporting when local variables aren't read</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noUnusedParameters" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to raise an error when a function parameter isn't read</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveConstEnums" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable erasing `const enum` declarations in generated code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeComments" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable emitting comments</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipDefaultLibCheck" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to skip type checking `.d.ts` files that are included with TypeScript</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipLibCheck" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to skip type checking all `.d.ts` files</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictBindCallApply" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to check that the arguments for `bind`, `call`, and `apply` methods match the original function</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictBuiltinIteratorReturn" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to instantiate built-in iterators with a `TReturn` type of `undefined` instead of `any`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictFunctionTypes" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to check to ensure parameters and the return values are subtype-compatible when assigning functions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictNullChecks" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to take into account `null` and `undefined` when type checking</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictPropertyInitialization" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to check for class properties that are declared but not set in the constructor</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stripInternal" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable emitting declarations that have `@internal` in their JSDoc comments</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suppressTypeCheckingErrors" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to suppress type checking errors. Non-standard option.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="target" use="optional" default="EcmaScript5">
      <xs:annotation>
        <xs:documentation>JavaScript language version for emitted JavaScript and include compatible library declarations</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="EcmaScript5" />
          <xs:enumeration value="EcmaScript6" />
          <xs:enumeration value="EcmaScript2015" />
          <xs:enumeration value="EcmaScript2016" />
          <xs:enumeration value="EcmaScript2017" />
          <xs:enumeration value="EcmaScript2018" />
          <xs:enumeration value="EcmaScript2019" />
          <xs:enumeration value="EcmaScript2020" />
          <xs:enumeration value="EcmaScript2021" />
          <xs:enumeration value="EcmaScript2022" />
          <xs:enumeration value="EcmaScript2023" />
          <xs:enumeration value="EcmaScript2024" />
          <xs:enumeration value="EcmaScriptNext" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="transpileOnly" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to run TypeScript to JS transpilation only (skip other passes). Non-standard option.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useDefineForClassFields" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to emit ECMAScript-standard-compliant class fields</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useUnknownInCatchVariables" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to use a default catch clause variables as `unknown` instead of `any`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="LibraryFileRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of bundled library declaration files that describe the target runtime environment</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddLibraryFileRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveLibraryFileRegistration_SchemaType" />
      <xs:element name="clear" type="ClearLibraryFileRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddLibraryFileRegistration_SchemaType">
    <xs:attribute name="libraryFileName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Library file name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveLibraryFileRegistration_SchemaType">
    <xs:attribute name="libraryFileName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Library file name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearLibraryFileRegistration_SchemaType" />
  <!-- /TypeScript settings -->

  <!-- Hogan settings -->
  <xs:complexType name="HoganSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Hogan translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="sectionTags" type="SectionTagRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="useNativeMinification" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow the use of native minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="variable" type="xs:string" use="optional" default="templates">
      <xs:annotation>
        <xs:documentation>Variable name for wrapper</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespace" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Prefix to template names</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delimiters" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String that overrides the default delimiters (for example, `&lt;% %&gt;`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SectionTagRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered custom section tags</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddSectionTagRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveSectionTagRegistration_SchemaType" />
      <xs:element name="clear" type="ClearSectionTagRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddSectionTagRegistration_SchemaType">
    <xs:attribute name="sectionName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Custom section name (used as a key)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="openingTagName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of opening tag</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closingTagName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of closing tag</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveSectionTagRegistration_SchemaType">
    <xs:attribute name="sectionName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Custom section name (used as a key)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearSectionTagRegistration_SchemaType" />
  <!-- /Hogan settings -->

  <!-- Handlebars settings -->
  <xs:complexType name="HandlebarsSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Handlebars translator</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="namespace" type="xs:string" use="optional" default="Handlebars.templates">
      <xs:annotation>
        <xs:documentation>Template namespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootPath" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Template root. Base value that will be stripped from template names.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHelpers" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Comma-separated list of known helpers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHelpersOnly" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to use only known helpers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="data" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to include data when compiling (`@data` variables)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /Handlebars settings -->

  <!-- Autoprefixer settings -->
  <xs:complexType name="AutoprefixerSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Andrey Sitnik's Autoprefix CSS postprocessor</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="browsers" type="BrowserConditionalExpressionCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="cascade" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to create nice visual cascade of prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="add" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to add new prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remove" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove outdated prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="supports" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to add prefixes for `@supports` parameters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flexbox" use="optional" default="All">
      <xs:annotation>
        <xs:documentation>Mode that defines should Autoprefixer add prefixes for flexbox properties</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="All">
            <xs:annotation>
              <xs:documentation>Add prefixes for flexbox properties for all browsers</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="None">
            <xs:annotation>
              <xs:documentation>Prevent adding prefixes for flexbox properties</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="No2009">
            <xs:annotation>
              <xs:documentation>Add prefixes for flexbox properties only for final and IE 10 versions of specification</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="grid" use="optional" default="None">
      <xs:annotation>
        <xs:documentation>Mode that defines should Autoprefixer add IE 10-11 prefixes for Grid Layout properties</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="None">
            <xs:annotation>
              <xs:documentation>Prevent Autoprefixer from outputting CSS Grid translations</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Autoplace">
            <xs:annotation>
              <xs:documentation>Enable Autoprefixer grid translations and include autoplacement support</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="NoAutoplace">
            <xs:annotation>
              <xs:documentation>Enable Autoprefixer grid translations but exclude autoplacement support</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownVersions" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to do not raise error on unknown browser version in the `browsers` attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stats" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Virtual path to file, that contains custom usage statistics for `&gt; 10% in my stats` browsers query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="BrowserConditionalExpressionCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of browser conditional expressions</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddBrowserConditionalExpression_SchemaType" />
      <xs:element name="remove" type="RemoveBrowserConditionalExpression_SchemaType" />
      <xs:element name="clear" type="ClearBrowserConditionalExpression_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddBrowserConditionalExpression_SchemaType">
    <xs:attribute name="conditionalExpression" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Conditional expression</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveBrowserConditionalExpression_SchemaType">
    <xs:attribute name="conditionalExpression" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Conditional expression</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearBrowserConditionalExpression_SchemaType" />
  <!-- /Autoprefixer settings -->

  <!-- Microsoft Ajax settings -->
  <xs:complexType name="MicrosoftAjaxSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Microsoft Ajax Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="MicrosoftAjaxCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="js" type="MicrosoftAjaxJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="MicrosoftAjaxCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Microsoft Ajax CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MicrosoftAjaxMinifierSettingsBase_SchemaType">
        <xs:attribute name="colorNames" use="optional" default="Hex">
          <xs:annotation>
            <xs:documentation>ColorNames setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Strict">
                <xs:annotation>
                  <xs:documentation>Convert strict names to hex values if shorter; hex values to strict names if shorter.
Leave all other color names or hex values as-specified.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Hex">
                <xs:annotation>
                  <xs:documentation>Always use hex values; do not convert any hex values to color names</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Major">
                <xs:annotation>
                  <xs:documentation>Convert known hex values to major-browser color names if shorter; and known major-browser color names to hex if shorter</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="NoSwap">
                <xs:annotation>
                  <xs:documentation>Don't swap names for hex or hex for names, whether or not one is shorter</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="commentMode" use="optional" default="Important">
          <xs:annotation>
            <xs:documentation>CommentMode setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Important">
                <xs:annotation>
                  <xs:documentation>Remove all comments except those marked as important (//! or /*!)</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="None">
                <xs:annotation>
                  <xs:documentation>Remove all source comments from the output</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="All">
                <xs:annotation>
                  <xs:documentation>Keep all source comments in the output</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Hacks">
                <xs:annotation>
                  <xs:documentation>Remove all source comments except those for approved comment-based hacks</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="minifyExpressions" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to minify the JS within expression functions</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeEmptyBlocks" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether empty blocks removes the corresponding rule or directive</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MicrosoftAjaxJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Microsoft Ajax JS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MicrosoftAjaxMinifierSettingsBase_SchemaType">
        <xs:attribute name="alwaysEscapeNonAscii" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag indicating whether to always escape non-ASCII characters as \uXXXX or to let the output encoding object handle that via the JsEncoderFallback object for the specified output encoding format</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="amdSupport" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag indicating whether to perform extra tasks on AMD-style defines</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="collapseToLiteral" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to collapse new Array() to [] and new Object() to {} (true) or leave as-is (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="constStatementsMozilla" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether to use old-style const statements (just var-statements that define unchangeable fields) or new EcmaScript 6 lexical declarations</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="debugLookupList" type="xs:string" use="optional" default="Debug,$Debug,WAssert,Msn.Debug,Web.Debug">
          <xs:annotation>
            <xs:documentation>String representation of the list of debug lookups (comma-separated)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="errorIfNotInlineSafe" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to throw an error if a source string is not safe for inclusion in an HTML inline script block</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="evalLiteralExpressions" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to evaluate expressions containing only literal bool, string, numeric, or null values (true). Leave literal expressions alone and do not evaluate them (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="evalTreatment" use="optional" default="Ignore">
          <xs:annotation>
            <xs:documentation>EvalTreatment setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Ignore">
                <xs:annotation>
                  <xs:documentation>Ignore all eval statements. This assumes that code that is eval'd will not attempt to access any local variables or functions, as those variables and function may be renamed.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="MakeImmediateSafe">
                <xs:annotation>
                  <xs:documentation>Assume any code that is eval'd will attempt to access local variables and functions declared in the same scope as the eval statement.
This will turn off local variable and function renaming in any scope that contains an eval statement.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="MakeAllSafe">
                <xs:annotation>
                  <xs:documentation>Assume that any local variable or function in any accessible scope chain may be referenced by code that is eval'd.
This will turn off local variable and function renaming for all scopes that contain an eval statement, and all their parent scopes up the chain to the global scope.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="ignoreConditionalCompilation" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether or not to ignore conditional-compilation comment syntax (true) or to try to retain the comments in the output (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignorePreprocessorDefines" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether or not to ignore preprocessor defines comment syntax (true) or to evaluate them (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="inlineSafeStrings" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to break up string literals containing &lt;/script&gt; so inline code won't break (true).
Leave string literals as-is (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="knownGlobalNamesList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>The known global names list as a single comma-separated string</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="localRenaming" use="optional" default="CrunchAll">
          <xs:annotation>
            <xs:documentation>Value indicating whether to how to rename local variables and functions:
KeepAll - do not rename local variables and functions;
CrunchAll - rename all local variables and functions to shorter names;
KeepLocalizationVars - rename all local variables and functions that do NOT start with L_</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="KeepAll">
                <xs:annotation>
                  <xs:documentation>Keep all names; don't rename anything</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="KeepLocalizationVars">
                <xs:annotation>
                  <xs:documentation>Rename all local variables and functions that do not begin with "L_"</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="CrunchAll">
                <xs:annotation>
                  <xs:documentation>Rename all local variables and functions</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="macSafariQuirks" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to add characters to the output to make sure Mac Safari bugs are not generated (true).
Disregard potential Mac Safari bugs (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="manualRenamesProperties" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether object property names with the specified "from" names will get renamed to the corresponding "to" names (true) when using the manual-rename feature, or left alone (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noAutoRenameList" type="xs:string" use="optional" default="$super">
          <xs:annotation>
            <xs:documentation>The no-automatic-renaming list as a single string of comma-separated identifiers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveFunctionNames" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Value indicating whether all function names must be preserved and remain as-named</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveImportantComments" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to preserve important comments in the output</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="quoteObjectLiteralProperties" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Value indicating whether to always quote object literal property names</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeFunctionExpressionNames" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether or not to remove unreferenced function expression names</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeUnneededCode" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Remove unneeded code, like uncalled local functions (true). Keep all code (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="renamePairs" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>String representation of all the indentifier replacements as a comma-separated list of "source=target" identifiers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="reorderScopeDeclarations" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether or not to reorder function and variable declarations within scopes (true), or to leave the order as specified in the original source</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="scriptVersion" use="optional" default="None">
          <xs:annotation>
            <xs:documentation>Enumeration that gives the parser a hint as to which version of EcmaScript standards to parse the source as</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="None" />
              <xs:enumeration value="EcmaScript5" />
              <xs:enumeration value="EcmaScript6" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="strictMode" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether or not to force the input code into strict mode (can still specify strict-mode in the sources if this value is false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="stripDebugStatements" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Strip debug statements (true). Leave debug statements (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MicrosoftAjaxMinifierSettingsBase_SchemaType" abstract="true">
    <xs:attribute name="allowEmbeddedAspNetBlocks" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Embedded ASP.NET blocks (&lt;% %&gt;) should be recognized and output as is</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blocksStartOnSameLine" use="optional" default="NewLine">
      <xs:annotation>
        <xs:documentation>Value indicating whether the opening curly brace for blocks is on its own line (NewLine) or on the same line as the preceding code (SameLine) or taking a hint from the source code position (UseSource).
Only relevant when OutputMode is set to MultipleLines.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="NewLine">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character on its own new line. Example:
if (condition)
{
  ...
}</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="SameLine">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character at the end of the previous line. Example:
if (condition) {
  ...
}</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="UseSource">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character on the same line or a new line depending on how it was specified in the sources</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ignoreAllErrors" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to ignore all errors found in the input code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreErrorList" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the list of errors to ignore (comma-separated)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentSize" type="xs:int" use="optional" default="4">
      <xs:annotation>
        <xs:documentation>Number of spaces or tabs per indent level when in `MultipleLines` output mode</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineBreakThreshold" type="xs:int" use="optional" default="2147482647">
      <xs:annotation>
        <xs:documentation>Column position at which the line will be broken at the next available opportunity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputMode" use="optional" default="SingleLine">
      <xs:annotation>
        <xs:documentation>Output mode:
SingleLine - output all code on a single line;
MultipleLines - break the output into multiple lines to be more human-readable</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="SingleLine">
            <xs:annotation>
              <xs:documentation>Output the minified code on a single line for maximum minification.
LineBreakThreshold may still break the single line into multiple lines at a syntactically correct point after the given line length is reached.
Not easily human-readable.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="MultipleLines">
            <xs:annotation>
              <xs:documentation>Output the minified code on multiple lines to increase readability</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="preprocessorDefineList" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the list of names defined for the preprocessor (comma-separated)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="termSemicolons" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to add a semicolon at the end of the parsed code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Severity level of errors:
 0 - syntax error;
 1 - the programmer probably did not intend to do this;
 2 - this can lead to problems in the future;
 3 - this can lead to performance problems;
 4 - this is just not right</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="4" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <!-- /Microsoft Ajax settings -->

  <!-- YUI settings -->
  <xs:complexType name="YuiSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of YUI Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="YuiCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="js" type="YuiJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="YuiCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of YUI CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="YuiMinifierSettingsBase_SchemaType">
        <xs:attribute name="removeComments" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to remove all comments except "important" comments</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="YuiJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of YUI JS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="YuiMinifierSettingsBase_SchemaType">
        <xs:attribute name="obfuscateJavascript" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to allow obfuscation of code</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveAllSemicolons" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to preserve unnecessary semicolons (such as right before a '}')</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="disableOptimizations" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to disable all the built-in micro optimizations</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignoreEval" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to ignore when processing code, that executed in eval operator</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" use="optional" default="UTF8">
          <xs:annotation>
            <xs:documentation>Type of Encoding</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="ASCII" />
              <xs:enumeration value="BigEndianUnicode" />
              <xs:enumeration value="Unicode" />
              <xs:enumeration value="UTF32" />
              <xs:enumeration value="UTF7" />
              <xs:enumeration value="UTF8" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="threadCulture" type="xs:string" use="optional" default="en-us">
          <xs:annotation>
            <xs:documentation>Culture you want the thread to run under.
This affects the treatment of numbers etc - e.g. 9.00 could be output as 9,00 (this is mainly for non English OS's).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="severity" use="optional" default="0">
          <xs:annotation>
            <xs:documentation>Severity level of errors:
 0 - only syntax error messages;
 1 - only syntax error messages and warnings.</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:int">
              <xs:minInclusive value="0" />
              <xs:maxInclusive value="1" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="YuiMinifierSettingsBase_SchemaType" abstract="true">
    <xs:attribute name="compressionType" use="optional" default="Standard">
      <xs:annotation>
        <xs:documentation>Code compression type</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="None" />
          <xs:enumeration value="Standard" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lineBreakPosition" type="xs:int" use="optional" default="-1">
      <xs:annotation>
        <xs:documentation>Column number, after which must be inserted a line break.
Specify 0 to get a line break after each semi-colon in JS, and after each rule in CSS.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /YUI settings -->

  <!-- NUglify settings -->
  <xs:complexType name="NUglifySettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of NUglify Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="NUglifyCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="js" type="NUglifyJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="NUglifyCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of NUglify CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NUglifyMinifierSettingsBase_SchemaType">
        <xs:attribute name="abbreviateHexColor" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to abbreviate hex colors to #rgb(a) format</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="colorNames" use="optional" default="Hex">
          <xs:annotation>
            <xs:documentation>ColorNames setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Strict">
                <xs:annotation>
                  <xs:documentation>Convert strict names to hex values if shorter; hex values to strict names if shorter.
Leave all other color names or hex values as-specified.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Hex">
                <xs:annotation>
                  <xs:documentation>Always use hex values; do not convert any hex values to color names</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Major">
                <xs:annotation>
                  <xs:documentation>Convert known hex values to major-browser color names if shorter; and known major-browser color names to hex if shorter</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="NoSwap">
                <xs:annotation>
                  <xs:documentation>Don't swap names for hex or hex for names, whether or not one is shorter</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="commentMode" use="optional" default="Important">
          <xs:annotation>
            <xs:documentation>CommentMode setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Important">
                <xs:annotation>
                  <xs:documentation>Remove all comments except those marked as important (//! or /*!)</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="None">
                <xs:annotation>
                  <xs:documentation>Remove all source comments from the output</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="All">
                <xs:annotation>
                  <xs:documentation>Keep all source comments in the output</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="Hacks">
                <xs:annotation>
                  <xs:documentation>Remove all source comments except those for approved comment-based hacks</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="decodeEscapes" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether unicode escape strings (e.g. `\ff0e`) would be replaced by it's actual character or not</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fixIE8Fonts" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether IE8 .EOT fonts should get a question-mark appended to the URL (if not there already) to prevent the browser from generating invalid HTTP requests to the server</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="minifyExpressions" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to minify the JS within expression functions</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeEmptyBlocks" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether empty blocks removes the corresponding rule or directive</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NUglifyJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of NUglify JS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NUglifyMinifierSettingsBase_SchemaType">
        <xs:attribute name="alwaysEscapeNonAscii" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag indicating whether to always escape non-ASCII characters as \uXXXX or to let the output encoding object handle that via the JsEncoderFallback object for the specified output encoding format</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="amdSupport" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag indicating whether to perform extra tasks on AMD-style defines</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="collapseToLiteral" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to collapse new Array() to [] and new Object() to {} (true) or leave as-is (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="constStatementsMozilla" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether to use old-style const statements (just var-statements that define unchangeable fields) or new EcmaScript 6 lexical declarations</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="debugLookupList" type="xs:string" use="optional" default="Debug,$Debug,WAssert,Msn.Debug,Web.Debug">
          <xs:annotation>
            <xs:documentation>String representation of the list of debug lookups (comma-separated)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="errorIfNotInlineSafe" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to throw an error if a source string is not safe for inclusion in an HTML inline script block</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="evalLiteralExpressions" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to evaluate expressions containing only literal bool, string, numeric, or null values (true). Leave literal expressions alone and do not evaluate them (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="evalTreatment" use="optional" default="Ignore">
          <xs:annotation>
            <xs:documentation>EvalTreatment setting</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Ignore">
                <xs:annotation>
                  <xs:documentation>Ignore all eval statements. This assumes that code that is eval'd will not attempt to access any local variables or functions, as those variables and function may be renamed.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="MakeImmediateSafe">
                <xs:annotation>
                  <xs:documentation>Assume any code that is eval'd will attempt to access local variables and functions declared in the same scope as the eval statement.
This will turn off local variable and function renaming in any scope that contains an eval statement.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="MakeAllSafe">
                <xs:annotation>
                  <xs:documentation>Assume that any local variable or function in any accessible scope chain may be referenced by code that is eval'd.
This will turn off local variable and function renaming for all scopes that contain an eval statement, and all their parent scopes up the chain to the global scope.</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="ignoreConditionalCompilation" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether or not to ignore conditional-compilation comment syntax (true) or to try to retain the comments in the output (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignorePreprocessorDefines" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether or not to ignore preprocessor defines comment syntax (true) or to evaluate them (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="inlineSafeStrings" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to break up string literals containing &lt;/script&gt; so inline code won't break (true).
Leave string literals as-is (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="knownGlobalNamesList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>The known global names list as a single comma-separated string</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="localRenaming" use="optional" default="CrunchAll">
          <xs:annotation>
            <xs:documentation>Value indicating whether to how to rename local variables and functions:
KeepAll - do not rename local variables and functions;
CrunchAll - rename all local variables and functions to shorter names;
KeepLocalizationVars - rename all local variables and functions that do NOT start with L_</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="KeepAll">
                <xs:annotation>
                  <xs:documentation>Keep all names; don't rename anything</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="KeepLocalizationVars">
                <xs:annotation>
                  <xs:documentation>Rename all local variables and functions that do not begin with "L_"</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
              <xs:enumeration value="CrunchAll">
                <xs:annotation>
                  <xs:documentation>Rename all local variables and functions</xs:documentation>
                </xs:annotation>
              </xs:enumeration>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="macSafariQuirks" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to add characters to the output to make sure Mac Safari bugs are not generated (true).
Disregard potential Mac Safari bugs (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="manualRenamesProperties" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether object property names with the specified "from" names will get renamed to the corresponding "to" names (true) when using the manual-rename feature, or left alone (false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noAutoRenameList" type="xs:string" use="optional" default="$super">
          <xs:annotation>
            <xs:documentation>The no-automatic-renaming list as a single string of comma-separated identifiers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveFunctionNames" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Value indicating whether all function names must be preserved and remain as-named</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="preserveImportantComments" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether to preserve important comments in the output</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="quoteObjectLiteralProperties" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Value indicating whether to always quote object literal property names</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeFunctionExpressionNames" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether or not to remove unreferenced function expression names</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="removeUnneededCode" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Remove unneeded code, like uncalled local functions (true). Keep all code (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="renamePairs" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>String representation of all the indentifier replacements as a comma-separated list of "source=target" identifiers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="reorderScopeDeclarations" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Value indicating whether or not to reorder function and variable declarations within scopes (true), or to leave the order as specified in the original source</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="scriptVersion" use="optional" default="None">
          <xs:annotation>
            <xs:documentation>Enumeration that gives the parser a hint as to which version of EcmaScript standards to parse the source as</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="None" />
              <xs:enumeration value="EcmaScript5" />
              <xs:enumeration value="EcmaScript6" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="strictMode" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Boolean value indicating whether or not to force the input code into strict mode (can still specify strict-mode in the sources if this value is false)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="stripDebugStatements" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Strip debug statements (true). Leave debug statements (false).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NUglifyMinifierSettingsBase_SchemaType" abstract="true">
    <xs:attribute name="allowEmbeddedAspNetBlocks" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Embedded ASP.NET blocks (&lt;% %&gt;) should be recognized and output as is</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blocksStartOnSameLine" use="optional" default="NewLine">
      <xs:annotation>
        <xs:documentation>Value indicating whether the opening curly brace for blocks is on its own line (NewLine) or on the same line as the preceding code (SameLine) or taking a hint from the source code position (UseSource).
Only relevant when OutputMode is set to MultipleLines.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="NewLine">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character on its own new line. Example:
if (condition)
{
  ...
}</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="SameLine">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character at the end of the previous line. Example:
if (condition) {
  ...
}</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="UseSource">
            <xs:annotation>
              <xs:documentation>Output the opening curly-brace block-start character on the same line or a new line depending on how it was specified in the sources</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ignoreAllErrors" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to ignore all errors found in the input code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreErrorList" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the list of errors to ignore (comma-separated)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentSize" type="xs:int" use="optional" default="4">
      <xs:annotation>
        <xs:documentation>Number of spaces per indent level when in MultipleLines output mode</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentType" use="optional" default="Space">
      <xs:annotation>
        <xs:documentation>Indent type when in `MultipleLines` output mode</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Space" />
          <xs:enumeration value="Tab" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lineBreakThreshold" type="xs:int" use="optional" default="2147482647">
      <xs:annotation>
        <xs:documentation>Column position at which the line will be broken at the next available opportunity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputMode" use="optional" default="SingleLine">
      <xs:annotation>
        <xs:documentation>Output mode:
SingleLine - output all code on a single line;
MultipleLines - break the output into multiple lines to be more human-readable</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="SingleLine">
            <xs:annotation>
              <xs:documentation>Output the minified code on a single line for maximum minification.
LineBreakThreshold may still break the single line into multiple lines at a syntactically correct point after the given line length is reached.
Not easily human-readable.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="MultipleLines">
            <xs:annotation>
              <xs:documentation>Output the minified code on multiple lines to increase readability</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="preprocessorDefineList" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the list of names defined for the preprocessor (comma-separated)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="termSemicolons" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to add a semicolon at the end of the parsed code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Severity level of errors:
 0 - syntax error;
 1 - the programmer probably did not intend to do this;
 2 - this can lead to problems in the future;
 3 - this can lead to performance problems;
 4 - this is just not right</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="4" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <!-- /NUglify settings -->

  <!-- Closure settings -->
  <xs:complexType name="ClosureSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Closure Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="js" type="ClosureJsSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="ClosureJsSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of minification JS assets</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="remote" type="ClosureRemoteJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="local" type="ClosureLocalJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="commonExternsFiles" type="CommonJsExternsFileRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="externsFileMappings" type="JsExternsFileMappingRegistrationCollection_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:simpleType name="ClosureLanguageSpec_SchemaType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="None" />
      <xs:enumeration value="EcmaScript3" />
      <xs:enumeration value="EcmaScript5" />
      <xs:enumeration value="EcmaScript5Strict" />
      <xs:enumeration value="EcmaScript6" />
      <xs:enumeration value="EcmaScript6Strict" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ClosureExperimentalLanguageSpec_SchemaType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="None" />
      <xs:enumeration value="EcmaScript3" />
      <xs:enumeration value="EcmaScript5" />
      <xs:enumeration value="EcmaScript5Strict" />
      <xs:enumeration value="EcmaScript6" />
      <xs:enumeration value="EcmaScript6Strict" />
      <xs:enumeration value="EcmaScript6Typed" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ClosureRemoteJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Closure remote JS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ClosureJsMinifierSettingsBase_SchemaType">
        <xs:attribute name="closureCompilerServiceApiUrl" type="xs:string" use="optional" default="http://closure-compiler.appspot.com/compile">
          <xs:annotation>
            <xs:documentation>URL of Google Closure Compiler Service API</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="excludeDefaultExterns" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to exclude common externs such as `document` and all its methods</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="language" type="ClosureLanguageSpec_SchemaType" use="optional" default="EcmaScript3">
          <xs:annotation>
            <xs:documentation>Language spec that input sources conform</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="languageOutput" type="ClosureLanguageSpec_SchemaType" use="optional" default="None">
          <xs:annotation>
            <xs:documentation>Language spec the output should conform to. If omitted, defaults to the value of `language`.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClosureLocalJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Closure local JS minifier</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ClosureJsMinifierSettingsBase_SchemaType">
        <xs:attribute name="acceptConstKeyword" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to allow usage of const keyword</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="allowEs6Output" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to allow ES6 language output for compiling ES6 to ES6 as well as transpiling to ES6 from lower versions</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="angularPass" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to generate `$inject` properties for AngularJS for functions annotated with `@ngInject`</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="closureCompilerApplicationPath" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Path to Google Closure Compiler Application</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="definitionList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>String representation of variable list, that overrides the values of a variables annotated `@define` (semicolon-separated list of values of the form &lt;name&gt;[=&lt;val&gt;]). Where &lt;name&gt; is the name of a `@define` variable and &lt;val&gt; is a boolean, number, or a single-quoted string that contains no single quotes. If [=&lt;val&gt;] is omitted, the variable is marked true.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="errorList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Comma-separated list of the named classes of warnings, that need to make an errors</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="exportLocalPropertyDefinitions" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to generate export code for local properties marked with `@export`</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="extraAnnotationNameList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Comma-separated whitelist of tag names in JSDoc</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="generateExports" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to generate export code for those marked with `@export`</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="javaVirtualMachinePath" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Path to Java Virtual Machine</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="languageInput" type="ClosureExperimentalLanguageSpec_SchemaType" use="optional" default="EcmaScript3">
          <xs:annotation>
            <xs:documentation>Language spec that input sources conform</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="languageOutput" type="ClosureExperimentalLanguageSpec_SchemaType" use="optional" default="None">
          <xs:annotation>
            <xs:documentation>Language spec the output should conform to. If omitted, defaults to the value of `languageInput`.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="processClosurePrimitives" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to process built-ins from the Closure library, such as `goog.require()`, `goog.provide()` and `goog.exportSymbol()`</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="processJqueryPrimitives" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to process built-ins from the jQuery library, such as `jQuery.fn` and `jQuery.extend()`</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="singleQuotes" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to output code with single quotes</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="thirdParty" type="Boolean_SchemaType" use="optional" default="true">
          <xs:annotation>
            <xs:documentation>Flag for whether to check source validity but do not enforce Closure style rules and conventions</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="transpileOnly" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to run ES6 to ES3 transpilation only, skip other passes</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="turnOffWarningClassList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Comma-separated list of the named classes of warnings, that need to turn off</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useOnlyCustomExterns" type="Boolean_SchemaType" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>Flag for whether to exclude the default externs</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="warningList" type="xs:string" use="optional" default="">
          <xs:annotation>
            <xs:documentation>Comma-separated list of the named classes of warnings, that need to make a normal warning</xs:documentation>
          </xs:annotation>
        </xs:attribute>
       </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClosureJsMinifierSettingsBase_SchemaType" abstract="true">
    <xs:attribute name="charset" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Input and output charset. By default, accept UTF-8 as input and output US_ASCII.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compilationLevel" use="optional" default="Simple">
      <xs:annotation>
        <xs:documentation>Degree of compression and optimization to apply to your JS.
There are 3 possible compilation levels:
WhitespaceOnly - just removes whitespace and comments from your JS;
Simple - performs compression and optimization that does not interfere with
the interaction between the compiled JS and other JS.
This level renames only local variables;
Advanced - achieves the highest level of compression by renaming symbols in your
JS. When using this type of compilation you must perform extra steps
to preserve references to external symbols.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="WhitespaceOnly" />
          <xs:enumeration value="Simple" />
          <xs:enumeration value="Advanced" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="prettyPrint" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to add line breaks and indentation to its output code to make the code easier for humans to read</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useTypesForOptimization" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to perform additional optimizations based on available information</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Severity level of errors:
 0 - only syntax error messages;
 1 - only syntax error messages and warnings generated by the optimization;
 2 - in addition to syntax errors and warnings generated by optimization passes, outputs warnings generated by selected code-checking passes;
 3 - in addition to syntax errors and warnings generated by optimization passes, outputs warnings generated by all code-checking passes.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="3" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CommonJsExternsFileRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered common JS externs files</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddCommonJsExternsFileRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveCommonJsExternsFileRegistration_SchemaType" />
      <xs:element name="clear" type="ClearCommonJsExternsFileRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddCommonJsExternsFileRegistration_SchemaType">
    <xs:attribute name="externsFilePath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path to extern file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveCommonJsExternsFileRegistration_SchemaType">
    <xs:attribute name="externsFilePath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path to extern file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearCommonJsExternsFileRegistration_SchemaType" />

  <xs:complexType name="JsExternsFileMappingRegistrationCollection_SchemaType">
    <xs:annotation>
      <xs:documentation>Collection of registered JS externs file mappings</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="AddJsExternsFileMappingRegistration_SchemaType" />
      <xs:element name="remove" type="RemoveJsExternsFileMappingRegistration_SchemaType" />
      <xs:element name="clear" type="ClearJsExternsFileMappingRegistration_SchemaType" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AddJsExternsFileMappingRegistration_SchemaType">
    <xs:attribute name="scriptFilePath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path to script file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="externsFilePaths" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Comma-separated list of the externs file paths</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RemoveJsExternsFileMappingRegistration_SchemaType">
    <xs:attribute name="scriptFilePath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path to script file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ClearJsExternsFileMappingRegistration_SchemaType" />
  <!-- /Closure settings -->

  <!-- UglifyJs settings -->
  <xs:complexType name="UglifySettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Uglify Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="js" type="UglifyJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="UglifyJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Uglify JS minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="parsing" type="UglifyParsingSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="compression" type="UglifyCompressionSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="mangling" type="UglifyManglingSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="codeGeneration" type="UglifyCodeGenerationSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="keepFunctionNames" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to do not mangle/drop function names. Useful for code relying on `Function.prototype.name`.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="screwIe8" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable full compliance with Internet Explorer 6-8 quirks</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Severity level of errors:
 0 - only error messages;
 1 - only error messages and warnings.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="1" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="UglifyParsingSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of parsing</xs:documentation>
    </xs:annotation>
    <xs:attribute name="bareReturns" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to allow return outside of functions. Useful when minifying CommonJS modules.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strict" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable automatic semicolon insertion and support for trailing comma in arrays and objects</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="UglifyCompressionSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of compression</xs:documentation>
    </xs:annotation>
    <xs:attribute name="angular" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable support of `@ngInject` annotations</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="booleans" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable various optimizations for boolean context</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cascade" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to small optimization for sequences</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collapseVars" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to collapse single-use `var` and `const` definitions when possible</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="comparisons" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to apply certain optimizations to binary nodes, attempts to negate binary nodes, etc.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compress" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to compress code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="conditionals" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to apply optimizations for if-s and conditional expressions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deadCode" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove unreachable code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dropConsole" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to discard calls to `console.*` functions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dropDebugger" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove debugger; statements</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="evaluate" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to attempt to evaluate constant expressions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="globalDefinitions" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the object (comma-separated list of values of the form SYMBOL[=value]) with properties named after symbols to replace (except where symbol has properly declared by a var declaration or use as function parameter or similar) and the values representing the AST replacement value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hoistFunctions" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to hoist function declarations</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hoistVars" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to hoist var declarations</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifReturn" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable optimizations for if/return and if/continue</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="joinVars" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to join consecutive var statements</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepFunctionArgs" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to prevent the compressor from discarding unused function arguments</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepInfinity" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to prevent `Infinity` from being compressed into `1/0`, which may cause performance issues on Chrome</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loops" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable optimizations for do, while and for loops when we can statically determine the condition</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="negateIife" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to negate IIFEs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passes" use="optional" default="1">
      <xs:annotation>
        <xs:documentation>Number of times to run compress</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="1" />
          <xs:maxInclusive value="2147483647" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="propertiesDotNotation" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to rewrite property access using the dot notation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pureGetters" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to UglifyJS will assume that object property access (e.g. foo.bar or foo["bar"]) doesn't have any side effects</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pureFunctions" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>String representation of the functions list, that can be safely removed if their return value is not used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reduceVars" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to improve optimization on variables assigned with and used as constant values</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequences" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to join consecutive simple statements using the comma operator</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topLevel" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to drop unreferenced functions and variables in the toplevel scope</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topRetain" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Comma-separated list of toplevel functions and variables to exclude from `unused` removal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unsafe" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to apply "unsafe" transformations</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unsafeMath" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize numerical expressions like `2 * x * 3` into `6 * x`, which may give imprecise floating point results</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unsafeProto" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize expressions like `Array.prototype.slice.call(a)` into `[].slice.call(a)`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unsafeRegExp" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable substitutions of variables with `RegExp` values the same way as if they are constants</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unused" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to drop unreferenced functions and variables</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="UglifyManglingSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of mangling</xs:documentation>
    </xs:annotation>
    <xs:attribute name="eval" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to mangle names visible in scopes where eval or when are used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="except" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Comma-separated list of names to exclude from mangling</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mangle" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to mangle names</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topLevel" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to mangle names declared in the toplevel scope</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="UglifyCodeGenerationSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of code generation</xs:documentation>
    </xs:annotation>
    <xs:attribute name="asciiOnly" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to escape Unicode characters in strings and regexps</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beautify" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to beautify the output</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bracketize" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert brackets in if, for, do, while or with statements, even if their body is a single statement</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="comments" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Value that determines what kind of comments need to preserve:
 "all" - keep all comments;
 "some" - keep JSDoc-style (e.g. `@license` or `@preserve`) and conditional compilation comments;
 valid JS RegExp like `/foo/`or `/^!/` - keep only comments that match;
 empty string - remove all comments.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentLevel" type="xs:int" use="optional" default="4">
      <xs:annotation>
        <xs:documentation>Indentation level, in spaces (pass an even number)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentStart" type="xs:int" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Initial indentation in spaces</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inlineScript" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to escape the slash in occurrences of &lt;/script in strings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepQuotedProperties" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to prevent stripping quotes from property names in object literals</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLineLength" type="xs:int" use="optional" default="32000">
      <xs:annotation>
        <xs:documentation>Maximum line length (for uglified code)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveLine" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to preserve line breaks</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="quoteKeys" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to quote all keys in literal objects</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="quoteStyle" use="optional" default="Auto">
      <xs:annotation>
        <xs:documentation>Preferred quote style for strings</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Auto">
            <xs:annotation>
              <xs:documentation>Prefers double quotes, switches to single quotes when there are more double quotes in the string itself</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Single">
            <xs:annotation>
              <xs:documentation>Always use single quotes</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Double">
            <xs:annotation>
              <xs:documentation>Always use double quotes</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Original">
            <xs:annotation>
              <xs:documentation>Always use the original quotes</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="semicolons" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to separate statements with semicolons</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spaceColon" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a space after the colon signs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unescapeRegexps" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to unescape regular expressions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:int" use="optional" default="80">
      <xs:annotation>
        <xs:documentation>Orientative line width that the beautifier will try to obey</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapIife" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to wrap IIFEs in parenthesis</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /UglifyJs settings -->

  <!-- Packer settings -->
  <xs:complexType name="PackerSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Dean Edwards' Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="js" type="PackerJsMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="PackerJsMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Dean Edwards' JS minifier</xs:documentation>
    </xs:annotation>
    <xs:attribute name="shrinkVariables" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to shrink variables</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base62Encode" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to Base62 encode</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /Packer settings -->

  <!-- CSSO settings -->
  <xs:complexType name="CssoSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Sergey Kryzhanovsky's Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="CssoCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="CssoCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Sergey Kryzhanovsky's CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:attribute name="disableRestructuring" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to disable structure minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMediaMerge" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable unsafe merge of `@media` rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="comments" use="optional" default="Exclamation">
      <xs:annotation>
        <xs:documentation>Comments mode</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Exclamation">
            <xs:annotation>
              <xs:documentation>Keep all exclamation comments</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="FirstExclamation">
            <xs:annotation>
              <xs:documentation>Keep first one exclamation comment</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="None">
            <xs:annotation>
              <xs:documentation>Remove all exclamation comments</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <!-- /CSSO settings -->

  <!-- WebGrease settings -->
  <xs:complexType name="WgSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of WebGrease Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="WgCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="WgCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of WebGrease Semantic CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:attribute name="shouldMinify" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to enable usual minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ejectCharset" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to eject the `@charset` rules before minification</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /WebGrease settings -->

  <!-- Clean-css settings -->
  <xs:complexType name="CleanSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Clean-css Minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="css" type="CleanCssMinifierSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="jsEngine" type="JsEngineSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="CleanCssMinifierSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of Clean CSS minifier</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="formatting" type="CleanFormattingSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="level1Optimizations" type="CleanLevel1OptimizationSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="level2Optimizations" type="CleanLevel2OptimizationSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="compatibility" type="xs:string" use="optional" default="*">
      <xs:annotation>
        <xs:documentation>Compatibility mode:
 "*" (default) - Internet Explorer 10+ compatibility mode;
 "ie9" - Internet Explorer 9+ compatibility mode;
 "ie8" - Internet Explorer 8+ compatibility mode;
 "ie7" - Internet Explorer 7+ compatibility mode.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="level" use="optional" default="One">
      <xs:annotation>
        <xs:documentation>Optimization level</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Zero" />
          <xs:enumeration value="One" />
          <xs:enumeration value="Two" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="severity" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Severity level of errors:
  0 - only error messages;
  1 - only error messages and warnings.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="1" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CleanFormattingSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of output CSS formatting</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="breaksInserting" type="CleanBreaksInsertingSettings_SchemaType" minOccurs="0" maxOccurs="1" />
      <xs:element name="spacesInserting" type="CleanSpacesInsertingSettings_SchemaType" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="indentBy" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Number of characters to indent with</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="2147483647" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentWith" use="optional" default="Space">
      <xs:annotation>
        <xs:documentation>Character to indent with</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Space" />
          <xs:enumeration value="Tab" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="wrapAt" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>Maximum line length</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="2147483647" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CleanBreaksInsertingSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of breaks inserting</xs:documentation>
    </xs:annotation>
    <xs:attribute name="afterAtRule" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after at-rule (e.g. `@charset`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterBlockBegins" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a beginning of block (e.g. `@media`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterBlockEnds" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a ending of block</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterComment" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a comment</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterProperty" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterRuleBegins" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a rule begins</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterRuleEnds" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break after a rule ends</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeBlockEnds" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break before a block ends</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="betweenSelectors" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a line break between selectors</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CleanSpacesInsertingSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of spaces inserting</xs:documentation>
    </xs:annotation>
    <xs:attribute name="aroundSelectorRelation" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a spaces around selector relations (e.g. `div &gt; a`>)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeBlockBegins" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a space before a block begins (e.g. `.block {`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeValue" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to insert a space before a value (e.g. `width: 1rem`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CleanLevel1OptimizationSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of level 1 optimizations</xs:documentation>
    </xs:annotation>
    <xs:attribute name="cleanupCharsets" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to move `@charset` to the front of a stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="normalizeUrls" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to normalize URL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeBackground" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `background` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeBorderRadius" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `border-radius` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeFilter" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `filter` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeFont" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `font` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeFontWeight" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `font-weight` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optimizeOutline" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize `outline` property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeEmpty" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove empty rules and nested blocks</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNegativePaddings" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove negative paddings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeQuotes" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove unnecessary quotes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeWhitespace" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove unused whitespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceMultipleZeros" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove redundant zeros</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceTimeUnits" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to replace time units with shorter values</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceZeroUnits" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to replace zero values with units</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="roundingPrecision" type="xs:string" use="optional" default="off">
      <xs:annotation>
        <xs:documentation>Rounding precision:
 "off" (default) - all precision changes are disabled;
 N - number of decimal places.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectorsSortingMethod" use="optional" default="Standard">
      <xs:annotation>
        <xs:documentation>Selector sorting method</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="None" />
          <xs:enumeration value="Standard" />
          <xs:enumeration value="Natural" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="specialComments" type="xs:string" use="optional" default="all">
      <xs:annotation>
        <xs:documentation>Number of `/*! ... */` comments preserved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tidyAtRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize at-rules (e.g. `@charset`, `@import`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tidyBlockScopes" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize block scopes (e.g. `@media`)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tidySelectors" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to optimize selectors</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CleanLevel2OptimizationSettings_SchemaType">
    <xs:annotation>
      <xs:documentation>Configuration settings of level 2 optimizations</xs:documentation>
    </xs:annotation>
    <xs:attribute name="mergeAdjacentRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to merge adjacent rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeIntoShorthands" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to merge properties into shorthands</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeMedia" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to merge `@media`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeNonAdjacentRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to merge non-adjacent rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeSemantically" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to merge semantically</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overrideProperties" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to override properties based on understandability</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeEmpty" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove empty rules and nested blocks</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reduceNonAdjacentRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to reduce non-adjacent rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeDuplicateFontRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove duplicate `@font-face`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeDuplicateMediaBlocks" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove duplicate `@media`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeDuplicateRules" type="Boolean_SchemaType" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove duplicate rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedAtRules" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to remove unused at rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restructureRules" type="Boolean_SchemaType" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Flag for whether to restructure rules</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipProperties" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Comma-separated list of properties to skip during optimization</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- /Clean-css settings -->
</xs:schema>