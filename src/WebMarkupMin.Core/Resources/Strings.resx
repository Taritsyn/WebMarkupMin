<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_EnumValueConversionFailed" xml:space="preserve">
    <value>Can not convert value '{0}' of enumeration type '{1}' to value of enumeration type '{2}'.</value>
  </data>
  <data name="Common_ValueIsEmpty" xml:space="preserve">
    <value>Value cannot be empty.</value>
  </data>
  <data name="Common_ValueIsNull" xml:space="preserve">
    <value>Value cannot be null.</value>
  </data>
  <data name="ErrorDetails_Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="ErrorDetails_ColumnNumber" xml:space="preserve">
    <value>Column number</value>
  </data>
  <data name="ErrorDetails_File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="ErrorDetails_LineNumber" xml:space="preserve">
    <value>Line number</value>
  </data>
  <data name="ErrorDetails_Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="ErrorDetails_SourceFragment" xml:space="preserve">
    <value>Source fragment</value>
  </data>
  <data name="ErrorMessage_BindingExpressionMinificationFailed" xml:space="preserve">
    <value>During minification of {0} binding expression error has occurred: {1}.</value>
  </data>
  <data name="ErrorMessage_IfConditionalCommentNotDeclared" xml:space="preserve">
    <value>It is impossible to parse a "End If conditional comment", because not declared "If conditional comment".</value>
  </data>
  <data name="ErrorMessage_InvalidCharactersInProcessingInstruction" xml:space="preserve">
    <value>In the processing instruction &lt;?{0} ?&gt; found invalid characters.</value>
  </data>
  <data name="ErrorMessage_InvalidCharactersInStartTag" xml:space="preserve">
    <value>In the start tag &lt;{0}&gt; found invalid characters.</value>
  </data>
  <data name="ErrorMessage_InvalidCharactersInXmlDeclaration" xml:space="preserve">
    <value>In the XML declaration found invalid characters.</value>
  </data>
  <data name="ErrorMessage_InvalidEndIfConditionalComment" xml:space="preserve">
    <value>Type of "End If conditional comment" does not match to the type of openened "If conditional comment".</value>
  </data>
  <data name="ErrorMessage_InvalidHtmlAttributeExpression" xml:space="preserve">
    <value>String representation of the HTML attribute expression have an incorrect format.</value>
  </data>
  <data name="ErrorMessage_InvalidSimpleRegularExpression" xml:space="preserve">
    <value>String representation of the simple regular expression have an incorrect format.</value>
  </data>
  <data name="ErrorMessage_InvalidSimpleRegularExpressionList" xml:space="preserve">
    <value>Comma-separated list of the simple regular expressions have an incorrect format.</value>
  </data>
  <data name="ErrorMessage_MarkupParsingFailed" xml:space="preserve">
    <value>During parsing of {0}-code error has occurred.</value>
  </data>
  <data name="ErrorMessage_NotClosedCdataSection" xml:space="preserve">
    <value>CDATA section is not closed.</value>
  </data>
  <data name="ErrorMessage_NotClosedComment" xml:space="preserve">
    <value>Comment is not closed.</value>
  </data>
  <data name="ErrorMessage_NotClosedConditionalComment" xml:space="preserve">
    <value>Remain not closed conditional comment.</value>
  </data>
  <data name="ErrorMessage_NotClosedIgnoringCommentTag" xml:space="preserve">
    <value>Remain not closed the ignoring comment tag.</value>
  </data>
  <data name="ErrorMessage_NotClosedTag" xml:space="preserve">
    <value>Tag &lt;{0}&gt; is not closed.</value>
  </data>
  <data name="ErrorMessage_QuoteExpected" xml:space="preserve">
    <value>Quote expected, found '{0}'.</value>
  </data>
  <data name="ErrorMessage_StartIgnoringCommentTagNotDeclared" xml:space="preserve">
    <value>It is impossible to parse a end ignoring comment tag, because not declared the start ignoring comment tag.</value>
  </data>
  <data name="ErrorMessage_StartTagNotDeclared" xml:space="preserve">
    <value>It is impossible to render a end tag &lt;/{0}&gt;, because  start tag &lt;{0}&gt; not declared.</value>
  </data>
  <data name="ErrorMessage_UnknownError" xml:space="preserve">
    <value>An unknown error has occurred.</value>
  </data>
  <data name="ErrorMessage_XmlDeclarationMinificationFailed" xml:space="preserve">
    <value>During minification of the XML declaration error has occurred.</value>
  </data>
  <data name="SuccesMessage_MarkupMinificationComplete" xml:space="preserve">
    <value>Minification of the {0} code has been completed successfully.</value>
  </data>
  <data name="WarningMessage_XmlBasedAttributeNotAllowed" xml:space="preserve">
    <value>XML-based attribute {0} not allowed here. If you want to use the XHTML syntax, it is better to use XHTML Minifier for minification of this document.</value>
  </data>
  <data name="WarningMessage_XmlDeclarationNotAllowed" xml:space="preserve">
    <value>XML declaration not allowed here. If you want to use XHTML syntax, it is better to use the XHTML Minifier for minification of this document.</value>
  </data>
</root>